#!/bin/bash
path=$(pwd)

trap ctrl_c INT
function ctrl_c() {
airmon-ng stop $devmon
delf
}
database () {
cntd=$(wc -l < $path/database)
echo "Current Database Entries:"
echo ""
for ((i=1; i<=cntd; i++))
do
var=$(sed -n "${i}p" <$path/database)
echo "$i : $var"
done
echo ""
echo "Witch entry do you want to edit or delete : (to cancel write exit)"
echo -n "Select from 1 to $cntd : "
read dataedit
if [[ "$dataedit" == "exit" ]]
then
exit 1
elif [[ "$dataedit" == "0" ]]
then
echo "Dont be stupid , there is no 0 in database to select"
sleep 3
clear
database
elif [[ "$dataedit" -gt "$cntd" ]]
then
echo "Dont be stupid , there is no $dataedit in database to select"
sleep 3
clear
database
elif [[ -z "$dataedit" ]]
then
echo "Nice choice , lets start all over again"
sleep 3
clear
database
fi
sel=$(sed -n "${dataedit}p" <$path/database)
edt=$(sed -n "${dataedit}p" <$path/database | awk '{$1=""; print $0}')
apn=$(sed -n "${dataedit}p" <$path/database | awk '{print$1}')
echo ""
echo "Selected entry :"
echo ""
echo "$sel"
echo ""
echo "What do you want to do ?"
echo ""
echo "1 - Edit this line"
echo "2 - Delete this line"
echo "3 - Cancel & Exit"
echo ""
echo -n "Choose (1,2 or 3) : "
read opt
case $opt in
1)
echo ""
echo "Write the new changes to this line without entering the AP Brand :"
echo ""
echo "------- Available Reaver switches fallowed in config -------->"
echo ""
echo "-p = Use the specified pin (may be arbitrary string or 4/8 digit WPS pin)"
echo "-d = Set the delay between pin attempts | Default [1]"
echo "-l = Set the time to wait if the AP locks WPS pin attempts | Default [60]"
echo "-r = Sleep for y seconds every x pin attempts"
echo "-t = Set the receive timeout period | Default [5]"
echo "-T = Set the M5/M7 timeout period | Default [0.20]"
echo "-N = Do not send NACK messages when out of order packets are received"
echo "-S = Use small DH keys to improve crack speed"
echo "-E = Terminate each WPS session with an EAP FAIL packet"
echo "-n = Target AP always sends a NACK | Default [Auto] (options: True | False | Auto)"
echo "-w = Mimic a Windows 7 registrar | Default [False] (options: True | False)"
echo ""
echo "------------------------------------------------------------->"
echo ""
echo "Existing line : $edt"
echo -n "Edit to : "
read edit
if [[ -z "$edit" ]]
then
echo "Nothing to be changed , exiting"
exit 1
fi
sed -i "${dataedit}d" "$path/database"
datab=$(stat -c %s $path/database)
if [[ "$datab" == "0" ]]
then
echo "$apn $edit" > "$path/database"
else
echo "$apn $edit" >> "$path/database"
fi
echo ""
echo "Database was edited with new values :"
echo "FROM : $sel"
echo "TO : $apn $edit"
echo ""
sleep 3
echo "Exiting"
exit 1
;;
2)
sed -i "${dataedit}d" "$path/database"
echo "done"
datab=$(stat -c %s $path/database)
if [[ "$datab" == "0" ]]
then
rm -rf "$path/database"
fi
sleep 3
exit 1
;;
3)
exit 1
;;
*)
exit 1
;;
esac
exit 1
}

dump () {
echo ""
echo "Scanning for networks"
echo ""
dupw=$(timeout 20s wash -i $devmon -o $path/waslog >/dev/null 2>&1)
tail -n+3 < $path/waslog > $path/out
cnt=$(wc -l < $path/out)
echo "Select one of the networks"
echo ""
for ((i=1; i<=cnt; i++))
do
nname=$(sed -n "${i}p"< $path/out | awk '{print $6}')
echo "$i : $nname"
done
echo ""
echo -ne "Choose a network from 1 to $cnt : "
read inp
if [[ $inp -gt "$cnt" ]]
then
echo " There is no $inp on the list , are U Stupid !!!"
echo ""
airmon-ng stop $devmon
delf
exit 1
fi
gmac=$(sed -n "$inp"p< $path/out | awk '{print $1}' | sed -e "s/:/-/g" | head -c 8)
nchoice=$(sed -n "$inp"p< $path/out | awk '{print $6}')
gch=$(sed -n "$inp"p< $path/out | awk '{print $2}')
echo ""
echo "Gathering information about $nchoice"
echo ""
gman=$(grep "$gmac" <oui.txt | awk '{print$3}')
if [ -z "$gman" ]
then
echo "Unable to find the brand of thos Access point"
echo ""
airmon-ng stop $devmon
delf
exit 1
fi
echo "The Brand name of $nchoice is $gman"
echo ""
if [ ! -f "$path/database" ]
then
echo "Database was not created yet , do you want to add the switches for reaver to this brand (y/n) ? "
echo -n "Choose (Y/N) : "
read dchoice
case $dchoice in
y|Y|YES|yes)
echo ""
echo "Please write all the switches for reaver excluding interface|bssid|channel"
echo ""
echo "------- Available Reaver switches allowed in config -------->"
echo ""
echo "-p = Use the specified pin (may be arbitrary string or 4/8 digit WPS pin)"
echo "-d = Set the delay between pin attempts | Default [1]"
echo "-l = Set the time to wait if the AP locks WPS pin attempts | Default [60]"
echo "-r = Sleep for y seconds every x pin attempts"
echo "-t = Set the receive timeout period | Default [5]"
echo "-T = Set the M5/M7 timeout period | Default [0.20]"
echo "-N = Do not send NACK messages when out of order packets are received"
echo "-S = Use small DH keys to improve crack speed"
echo "-E = Terminate each WPS session with an EAP FAIL packet"
echo "-n = Target AP always sends a NACK | Default [Auto] (options: True | False | Auto)"
echo "-w = Mimic a Windows 7 registrar | Default [False] (options: True | False)"
echo ""
echo "------------------------------------------------------------->"
echo ""
echo "Example 1 with direct pin : -p 12345678 -d 2 -N -E"
echo "Example 2 : -t 10 -T 0.60 -N -E -w -K"
echo ""
echo "Write the switches for $gman"
echo -n "Switches : "
read swt
echo "$gman $swt" > $path/database
;;
n|N|NO|no)
echo "unable to start the attack without a specific configuration"
echo ""
airmon-ng stop $devmon
delf
exit 1
;;
*)
echo "Unspecified Selection"
echo ""
airmon-ng stop $devmon
delf
exit 1
;;
esac
fi
dbs=$(grep "$gman" < database | awk '{$1=""; print $0}')
mny=$(grep "$gman" < database | wc -l )
if [[ -z "$dbs" ]]
then 
echo "It was not found in database the switches for $gman , do you want to add the switches for reaver to this brand (y/n) ? "
echo -n "Choose (Y/N) : "
read dchoice
case $dchoice in
y|Y|YES|yes)
echo ""
echo "Please write all the switches for reaver excluding interface|bssid|channel"
echo ""
echo "------- Available Reaver switches allowed in config -------->"
echo ""
echo "-p = Use the specified pin (may be arbitrary string or 4/8 digit WPS pin)"
echo "-d = Set the delay between pin attempts | Default [1]"
echo "-l = Set the time to wait if the AP locks WPS pin attempts | Default [60]"
echo "-r = Sleep for y seconds every x pin attempts"
echo "-t = Set the receive timeout period | Default [5]"
echo "-T = Set the M5/M7 timeout period | Default [0.20]"
echo "-N = Do not send NACK messages when out of order packets are received"
echo "-S = Use small DH keys to improve crack speed"
echo "-E = Terminate each WPS session with an EAP FAIL packet"
echo "-n = Target AP always sends a NACK | Default [Auto] (options: True | False | Auto)"
echo "-w = Mimic a Windows 7 registrar | Default [False] (options: True | False)"
echo ""
echo "------------------------------------------------------------->"
echo ""
echo "Example 1 with direct pin : -p 12345678 -d 2 -N -E"
echo "Example 2 : -t 10 -T 0.60 -N -E -w "
echo ""
echo "Write the switches for $gman"
echo -n "Switches : "
read swt
if [[ -z "$swt" ]]
then
echo "Empty input , exiting"
sleep 3
delf
exit 1
fi
echo "$gman $swt" > $path/database
;;
n|N|NO|no)
echo "unable to start the attack without a specific configuration"
echo ""
airmon-ng stop $devmon
delf
exit 1
;;
*)
echo "Unspecified Selection"
echo ""
airmon-ng stop $devmon
delf
exit 1
;;
esac
fi
echo "Looking in database for reaver switches to $gman"
echo ""
if [[ "$mny" -gt "1" ]]
then
grep -n "$gman" <$path/database | sed "s/\:.*//">$path/lsout
scount=$(wc -l <$path/lsout)
echo "Found all these switches for $gman :"
echo ""
for ((i=1; i<=scount; i++))
do
var=$(sed -n "${i}p" <$path/lsout)
dbs=$(sed -n "${var}p" < $path/database | awk '{$1=""; print $0}')
echo "$i : $dbs"
done
echo ""
echo "Witch one do you want to use ?"
echo ""
echo -n "Select from 1 to $scount : "
read rvst
var=$(sed -n "${rvst}p" <$path/lsout)
dbs=$(sed -n "${var}p" < $path/database | awk '{$1=""; print $0}')
echo "you selected switch number $rvst : $dbs"
else
echo "Found this switch : $dbs"
echo ""
echo -n "Do you want to test it ? (y/n)"
read inp
case $inp in
y|y|yes|YES)
echo "Starting Reaver with switches command"
airmon-ng stop $devmon
delf
exit 1
;;
n|N|NO|no)
echo "Stopping and exiting"
airmon-ng stop $devmon
delf
exit 1
;;
*)
echo "Choice not valid"
airmon-ng stop $devmon
delf
exit 1
;;
esac
fi
}
delf (){
rm -rf check >/dev/null 2>&1
rm -rf devices >/dev/null 2>&1
rm -rf wash >/dev/null 2>&1
rm -rf washlog >/dev/null 2>&1
rm -rf out >/dev/null 2>&1
rm -rf airdump >/dev/null 2>&1
rm -rf monitor >/dev/null 2>&1
rm -rf lsout >/dev/null 2>&1
}
nstart () {
dev=$(iw dev | awk '$1=="Interface"{print $2}')
cnt=$(iw dev | awk '$1=="Interface"{print $2}'| wc -l)
if [[ -z $dev ]]
then
echo "No wireless devices were found"
exit 1
fi 
echo "Select one of the available interfaces :"
for i in "$cnt"
do
echo "$dev" >> devices
var=$(sed -n "${i}p" devices)
if [[ ! -z "$var" ]]
then
echo "$i : $var"
fi
done
echo ""
echo -ne "Select : "
read sdev
stdev=$(sed -n "${i}p" devices)
ifconfig $stdev down
airmon-ng check kill >/dev/null 2>&1
airmon-ng start $stdev | tee $path/monitor >/dev/null 2>&1
devmon=$(iw dev | awk '$1=="Interface"{print $2}' | sed -n "1p")
ifconfig $devmon down >/dev/null 2>&1
macchanger -A $devmon >/dev/null 2>&1
iw reg set GY >/dev/null 2>&1
ifconfig $devmon up
echo ""
echo "Your monitor is $devmon"
echo ""
echo "Testing Injection"
aireplay-ng -9 $devmon > check 
chk=$(cat check | grep "Injection is working!")
if [[ -z "$chk" ]]
then
echo "Injection is not working"
else
echo "injection is working"
dump
fi
airmon-ng stop $devmon
delf
}	
delf
echo "█╗    █╗█╗██████╗█╗  ██████╗██╗  █╗█╗█████╗██████╗████╗ "                   
echo "█║    █║█║█╔════╝█║  █ ╔═══╝███╗ █║█║█╔══█╗█╔════╝█╔═ █╗"                   
echo "█║    █║█║████╗  █║  ██████╗█╔█╗ █║█║█████╔████╗  ████╔╝"                   
echo "█║ █╗ █║█║█╔══╝  █║  ╚════█║█║╚█╗█║█║█╔═══╝█╔══╝  █╔══█╗"                   
echo "╚██╔██╔╝█║█║     █║  ██████║█║ ╚██║█║█║    ██████╗█║  █║"                   
echo " ╚═╝╚═╝ ╚╝╚╝     ╚╝  ╚═════╝╚╝  ╚═╝╚╝╚╝    ╚═════╝╚╝  ╚╝" 
rm -f devices
echo ""
datab=$(stat -c %s $path/database)
if [[ "$datab" == "0" ]]
then
rm -rf "$path/database" >/dev/null 2>&1
fi
if [ -f "$path/database" ]
then
echo "Select one of those options :"
echo ""
echo "1 - Normal Start"
echo "2 - Edit/Delete Database"
echo "3 - Exit"
echo ""
echo -n "Choose (1,2 or 3) : "
read choice
case $choice in
1)
nstart
;;
2)
clear
database
;;
3)
delf
exit 1
;;
*)
echo "Choice not Available , exiting"
delf
exit 1
;;
esac
else
nstart
fi
